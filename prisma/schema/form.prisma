// === Forms / Question & Responses ===
model FormType {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  forms Form[]
}

model Form {
  id          Int      @id @default(autoincrement())
  formTypeId  Int
  formType    FormType @relation(fields: [formTypeId], references: [id], onDelete: Restrict)
  title       String   @unique
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  questions            Question[]
  formResponseMeetings FormResponseMeeting[]
  soloProjects         SoloProject[]
  voyageApplications   VoyageApplication[]
}

model Question {
  id               Int          @id @default(autoincrement())
  formId           Int
  form             Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  order            Int
  inputTypeId      Int
  inputType        InputType    @relation(fields: [inputTypeId], references: [id], onDelete: Restrict)
  text             String
  description      String?
  answerRequired   Boolean
  multipleAllowed  Boolean?
  optionGroupId    Int?
  optionGroup      OptionGroup? @relation(fields: [optionGroupId], references: [id])
  parentQuestionId Int?
  parentQuestion   Question?    @relation("QuestionSubQuestion", fields: [parentQuestionId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  responses    Response[]
  subQuestions Question[] @relation("QuestionSubQuestion")
  parseConfig  Json?
}

model InputType {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  questions Question[]
}

model OptionGroup {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  optionChoices OptionChoice[]
  questions     Question[]

}

model OptionChoice {
  id            Int         @id @default(autoincrement())
  optionGroupId Int
  optionGroup   OptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
  text          String

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  responses Response[]
  parseConfig Json?
}

model Response {
  id              Int            @id @default(autoincrement())
  questionId      Int
  question        Question       @relation(fields: [questionId], references: [id])
  optionChoiceId  Int?
  optionChoice    OptionChoice?  @relation(fields: [optionChoiceId], references: [id])
  numeric         Int?
  boolean         Boolean?
  text            String?
  responseGroupId Int?
  responseGroup   ResponseGroup? @relation(fields: [responseGroupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt
}

model ResponseGroup {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  responses                 Response[]
  soloProject               SoloProject?
  voyageApplication         VoyageApplication?
  formResponseMeeting       FormResponseMeeting?
  formResponseCheckin       FormResponseCheckin?
  formResponseVoyageProject FormResponseVoyageProject?
}

model FormResponseMeeting {
  id              Int            @id @default(autoincrement())
  formId          Int
  form            Form           @relation(fields: [formId], references: [id])
  meetingId       Int
  meeting         TeamMeeting    @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  responseGroupId Int?           @unique
  responseGroup   ResponseGroup? @relation(fields: [responseGroupId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  @@unique(fields: [formId, meetingId], name: "meetingFormId")
}

model FormResponseCheckin {
  id                 Int              @id @default(autoincrement())
  voyageTeamMemberId Int
  voyageTeamMember   VoyageTeamMember @relation(fields: [voyageTeamMemberId], references: [id], onDelete: Cascade)
  sprintId           Int
  sprint             Sprint           @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  adminComments      String?
  feedbackSent       Boolean          @default(false)
  responseGroupId    Int              @unique
  responseGroup      ResponseGroup    @relation(fields: [responseGroupId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  @@unique(fields: [voyageTeamMemberId, sprintId], name: "voyageTeamMemberSprintId")
}

model FormResponseVoyageProject {
  id              Int           @id @default(autoincrement())
  voyageTeamId    Int           @unique
  voyageTeam      VoyageTeam    @relation(fields: [voyageTeamId], references: [id], onDelete: Cascade)
  responseGroupId Int           @unique
  responseGroup   ResponseGroup @relation(fields: [responseGroupId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt
}
