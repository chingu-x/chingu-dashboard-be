// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model HealthCheck {
  id         Int      @id @default(autoincrement())
  statusCode Int
  resMsg     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Gender {
  id           Int      @id @default(autoincrement())
  abbreviation String   @unique
  description  String
  createdAt    DateTime @default(now()) @db.Timestamptz()
  updatedAt    DateTime @updatedAt

  users User[]
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  firstName   String
  lastName    String
  avatar      String   @default("")
  githubId    String?
  discordId   String?
  twitterId   String?
  linkedinId  String?
  email       String   @unique
  password    String
  gender      Gender?  @relation(fields: [genderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  genderId    Int?
  countryCode String?
  timezone    String
  comment     String?
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt

  voyageTeamMembers VoyageTeamMember[]
  responseUser      FormResponseUser[]
}

model Voyage {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  startDate DateTime @db.Timestamptz()
  endDate   DateTime @db.Timestamptz()
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  voyageTeams VoyageTeam[]
  sprints     Sprint[]
}

model Sprint {
  id        Int      @id @default(autoincrement())
  voyageId  Int
  voyage    Voyage   @relation(fields: [voyageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  number    Int
  startDate DateTime @db.Timestamptz()
  endDate   DateTime @db.Timestamptz()
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  teamMeetings TeamMeeting[]

  @@unique(fields: [voyageId, number], name: "voyageSprintNumber")
}

model VoyageStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt

  voyageTeams       VoyageTeam[]
  voyageTeamMembers VoyageTeamMember[]
}

model Tier {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt

  voyageTeams VoyageTeam[]
}

model VoyageTeam {
  id            Int           @id @default(autoincrement())
  voyage        Voyage?       @relation(fields: [voyageId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  voyageId      Int?
  name          String        @unique
  status        VoyageStatus? @relation(fields: [statusId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  statusId      Int?
  repoUrl       String
  repoUrlBE     String?
  deployedUrl   String?
  deployedUrlBE String?
  tier          Tier?         @relation(fields: [tierId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  tierId        Int?
  endDate       DateTime
  createdAt     DateTime      @default(now()) @db.Timestamptz()
  updatedAt     DateTime      @updatedAt

  voyageTeamMembers  VoyageTeamMember[]
  teamTechStackItems TeamTechStackItem[]
  teamMeetings       TeamMeeting[]
  responseVoyageTeam FormResponseVoyageTeam[]
}

model VoyageRole {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt

  voyageTeamMembers VoyageTeamMember[]
}

model VoyageTeamMember {
  id           Int           @id @default(autoincrement())
  member       User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId       String        @db.Uuid
  voyageTeam   VoyageTeam    @relation(fields: [voyageTeamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  voyageTeamId Int
  voyageRole   VoyageRole?   @relation(fields: [voyageRoleId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  voyageRoleId Int?
  status       VoyageStatus? @relation(fields: [statusId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  statusId     Int?
  hrPerSprint  Float
  createdAt    DateTime      @default(now()) @db.Timestamptz()
  updatedAt    DateTime      @updatedAt

  teamTechStackItemVotes   TeamTechStackItemVote[]
  projectIdeas             ProjectIdea[]
  projectIdeaVotes         ProjectIdeaVote[]
  teamResources            TeamResource[]
  projectFeatures          ProjectFeature[]
  responseVoyageTeamMember FormResponseVoyageTeamMember[]

  @@unique(fields: [userId, voyageTeamId], name: "userVoyageId")
}

model ProjectIdea {
  id                 Int               @id @default(autoincrement())
  contributedBy      VoyageTeamMember? @relation(fields: [voyageTeamMemberId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  voyageTeamMemberId Int?
  title              String
  description        String
  vision             String
  createdAt          DateTime          @default(now()) @db.Timestamptz()
  updatedAt          DateTime          @updatedAt

  projectIdeaVotes ProjectIdeaVote[]
}

model ProjectIdeaVote {
  id                 Int               @id @default(autoincrement())
  votedBy            VoyageTeamMember? @relation(fields: [voyageTeamMemberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  voyageTeamMemberId Int?
  projectIdea        ProjectIdea?      @relation(fields: [projectIdeaId], references: [id], onDelete: Cascade)
  projectIdeaId      Int
  createdAt          DateTime          @default(now()) @db.Timestamptz()
  updatedAt          DateTime          @updatedAt
}

model TechStackCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt

  teamTechStackItems TeamTechStackItem[]
}

model TeamTechStackItem {
  id           Int                @id @default(autoincrement())
  name         String             @db.Citext
  category     TechStackCategory? @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  categoryId   Int?
  voyageTeam   VoyageTeam         @relation(fields: [voyageTeamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  voyageTeamId Int
  createdAt    DateTime           @default(now()) @db.Timestamptz()
  updatedAt    DateTime           @updatedAt

  teamTechStackItemVotes TeamTechStackItemVote[]

  @@unique(fields: [name, voyageTeamId, categoryId], name: "teamTechUniqueKey")
}

model TeamTechStackItemVote {
  id           Int               @id @default(autoincrement())
  teamTech     TeamTechStackItem @relation(fields: [teamTechId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamTechId   Int
  votedBy      VoyageTeamMember? @relation(fields: [teamMemberId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  teamMemberId Int?
  createdAt    DateTime          @default(now()) @db.Timestamptz()
  updatedAt    DateTime          @updatedAt

  @@unique(fields: [teamTechId, teamMemberId], name: "userTeamStackVote")
}

model TeamResource {
  id           Int               @id @default(autoincrement())
  teamMemberId Int?
  addedBy      VoyageTeamMember? @relation(fields: [teamMemberId], references: [id], onDelete: SetNull)
  url          String
  title        String
  createdAt    DateTime          @default(now()) @db.Timestamptz()
  updatedAt    DateTime          @updatedAt
}

model FeatureCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt

  projectFeatures ProjectFeature[]
}

model ProjectFeature {
  id                Int               @id @default(autoincrement())
  addedBy           VoyageTeamMember? @relation(fields: [teamMemberId], references: [id], onDelete: SetNull)
  teamMemberId      Int?
  category          FeatureCategory?  @relation(fields: [featureCategoryId], references: [id], onDelete: SetNull)
  featureCategoryId Int?
  description       String
  createdAt         DateTime          @default(now()) @db.Timestamptz()
  updatedAt         DateTime          @updatedAt
}

model TeamMeeting {
  id           Int        @id @default(autoincrement())
  sprintId     Int
  sprint       Sprint     @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  voyageTeamId Int
  voyageTeam   VoyageTeam @relation(fields: [voyageTeamId], references: [id], onDelete: Cascade)
  title        String
  dateTime     DateTime?
  meetingLink  String?
  notes        String?
  createdAt    DateTime   @default(now()) @db.Timestamptz()
  updatedAt    DateTime   @updatedAt

  agendas             Agenda[]
  formResponseMeeting FormResponseMeeting[]
}

model Agenda {
  id            Int         @id @default(autoincrement())
  teamMeetingId Int
  teamMeeting   TeamMeeting @relation(fields: [teamMeetingId], references: [id], onDelete: Cascade)
  title         String
  description   String
  status        Boolean
  createdAt     DateTime    @default(now()) @db.Timestamptz()
  updatedAt     DateTime    @updatedAt
}

model Form {
  id          Int      @id @default(autoincrement())
  formTypeId  Int
  formType    FormType @relation(fields: [formTypeId], references: [id], onDelete: Restrict)
  title       String   @unique
  description String?
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt

  questions            Question[]
  formResponseMeetings FormResponseMeeting[]
}

model FormType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  forms Form[]
}

model InputType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  questions Question[]
}

model Question {
  id              Int          @id @default(autoincrement())
  formId          Int
  form            Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  order           Int
  inputTypeId     Int
  inputType       InputType    @relation(fields: [inputTypeId], references: [id], onDelete: Restrict)
  text            String
  description     String?
  answerRequired  Boolean
  multipleAllowed Boolean?
  optionGroupId   Int?
  optionGroup     OptionGroup? @relation(fields: [optionGroupId], references: [id])
  createdAt       DateTime     @default(now()) @db.Timestamptz()
  updatedAt       DateTime     @updatedAt

  responses Response[]
}

model OptionGroup {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt

  optionChoices OptionChoice[]
  questions     Question[]
}

model OptionChoice {
  id            Int         @id @default(autoincrement())
  optionGroupId Int
  optionGroup   OptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
  text          String
  createdAt     DateTime    @default(now()) @db.Timestamptz()
  updatedAt     DateTime    @updatedAt
  Response      Response[]
}

model Response {
  id                    Int                  @id @default(autoincrement())
  questionId            Int
  question              Question             @relation(fields: [questionId], references: [id])
  optionChoiceId        Int?
  optionChoice          OptionChoice?        @relation(fields: [optionChoiceId], references: [id])
  numeric               Int?
  boolean               Boolean?
  text                  String?
  formResponseMeetingId Int?
  formResponseMeeting   FormResponseMeeting? @relation(fields: [formResponseMeetingId], references: [id], onDelete: Cascade)

  responseVoyageTeams       FormResponseVoyageTeam[]
  responseUsers             FormResponseUser[]
  responseVoyageTeamMembers FormResponseVoyageTeamMember[]

  @@unique(fields: [questionId, formResponseMeetingId], name: "questionResponseMeeting")
}

model FormResponseMeeting {
  id        Int         @id @default(autoincrement())
  formId    Int
  form      Form        @relation(fields: [formId], references: [id])
  meetingId Int
  meeting   TeamMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  responses Response[]

  @@unique(fields: [formId, meetingId], name: "meetingFormId")
}

//
//  Draft of more Extension of Response Table for future use
//  These need to be updated to like FormResponseMeeting
//

model FormResponseUser {
  id         Int      @id @default(autoincrement())
  responseId Int
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FormResponseVoyageTeam {
  id           Int        @id @default(autoincrement())
  responseId   Int
  response     Response   @relation(fields: [responseId], references: [id], onDelete: Cascade)
  voyageTeamId Int
  voyageTeam   VoyageTeam @relation(fields: [voyageTeamId], references: [id], onDelete: Cascade)
}

model FormResponseVoyageTeamMember {
  id                 Int              @id @default(autoincrement())
  responseId         Int
  response           Response         @relation(fields: [responseId], references: [id], onDelete: Cascade)
  voyageTeamMemberId Int
  voyageTeamMember   VoyageTeamMember @relation(fields: [voyageTeamMemberId], references: [id], onDelete: Cascade)
}
